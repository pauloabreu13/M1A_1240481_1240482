pipeline {
    agent any

    environment {
        MAVEN_HOME = '/usr/share/maven'
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
        //PATH = "${env.MAVEN_HOME}/bin:${env.JAVA_HOME}/bin:${env.PATH}"
        SSH_KEY = credentials('MySSHKey')

        GITHUB_URL = 'https://github.com/pedrojcoliveira/M1A_1240481_1240482.git'
        GITHUB_BRANCH = 'main'
        GITHUB_ID = 'githubaccesstoken'
    }

    stages {

        stage('Checkout') {
            steps {
                git url: "${GITHUB_URL}", branch: "${GITHUB_BRANCH}", credentialsId: "${GITHUB_ID}"
            }
        }

        stage('Clean') {
            steps {
                // Run the Maven clean command to clean the project
                sh "${MAVEN_HOME}/bin/mvn clean"
            }
        }

        stage('Validate') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn validate"
            }
        }

        stage('Compile') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn compile"
            }
        }

        stage('Unit Tests') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn surefire:test"
            }
        }

        stage('Integration Tests') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn failsafe:integration-test failsafe:verify"
            }
        }

        stage('Mutation Testing') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn org.pitest:pitest-maven:mutationCoverage"
            }
        }

        stage('Package') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn package -DskipTests"
            }
        }

        /*stage('SonarQube Analysis') {
            steps {
                 // Análise de código com o SonarQube
                 withSonarQubeEnv('SonarQube') {
                      sh "${MAVEN_HOME}/bin/mvn sonar:sonar -Dsonar.projectKey=SonarQubeToken -Dsonar.projectName='SonarQube' -Dsonar.host.url=http://localhost:9000"
                 }
                 echo 'SonarQube Analysis Completed'
            }
        }*/

        stage('Deploy') {
            steps {
                script {
                    // Kill previous execution of the JAR
                    sh "pkill -f psoft-g1-0.0.1-SNAPSHOT.jar || true"

                    // Secure copy of the project
                    sh """
                    scp -i "$SSH_KEY" -P 11363 target/psoft-g1-0.0.1-SNAPSHOT.jar root@vsgate-ssh.dei.isep.ipp.pt:/usr/local/M1A_1240481_1240482
                    """

                    echo "Deploying application..."

                    // Start the JAR in the background
                    sh """
                    ssh -i "$SSH_KEY" -p 11363 root@vsgate-ssh.dei.isep.ipp.pt "nohup java -jar /usr/local/M1A_1240481_1240482/psoft-g1-0.0.1-SNAPSHOT.jar --server.port=2228 > /dev/null 2>&1 &"
                    """
                }
            }
        }
    }

    post {
        success {
            // Actions to take when the pipeline succeeds
            echo 'Pipeline completed successfully!'
        }
        failure {
            // Actions to take when the pipeline fails
            echo 'Pipeline failed!'
        }
    }

}
